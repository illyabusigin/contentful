package management

import (
	"fmt"
)

type Link struct {
	Type     string
	LinkType string
	ID       string
}

// Entry represent textual content in a space. An entry's data adheres to a
// certain content type.
type Entry struct {
	System struct {
		System
		Type struct {
			Link `json:"sys"`
		} `json:"contentType"`
	} `json:"sys"`

	Fields map[string]map[string]interface{} `json:"fields"`

	Type struct {
	}
	SpaceID string `json:"-"`
}

// Validate validates the entry
func (c *Entry) Validate() error {

	return nil
}

// QueryEntries returns all entries for the given space and parameters.
func (c *Client) QueryEntries(spaceID string, params map[string]string, limit int, offset int) (entries []*Entry, pagination *Pagination, err error) {
	if spaceID == "" {
		return nil, nil, fmt.Errorf("FetchEntries failed. Space identifier is not valid!")
	}

	if limit <= 0 {
		return nil, nil, fmt.Errorf("FetchEntries failed. Limit must be greater than 0")
	}

	if limit > 100 {
		limit = 100
	}

	c.rl.Wait()

	type entriesResponse struct {
		*Pagination
		Items []*Entry `json:"items"`
	}

	results := new(entriesResponse)
	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries", spaceID)
	req, err := c.sling.New().
		Get(path).
		Request()

	if err != nil {
		return
	}

	// Add query parameters
	if params != nil {
		for k, v := range params {
			req.URL.Query().Set(k, v)
		}
	}

	// Perform request
	c.sling.Do(req, results, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	return results.Items, results.Pagination, nil
}

// FetchEntry returns a single entry for the given space and entry identifier
func (c *Client) FetchEntry(spaceID string, entryID string) (entry *Entry, err error) {
	if spaceID == "" || entryID == "" {
		err = fmt.Errorf("FetchContentType failed. Invalid spaceID or contentTypeID.")
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v", spaceID, entryID)
	_, err = c.sling.New().Get(path).Receive(entry, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	return
}

// CreateEntry will create a new entry with an ID specified by the user or
// generated by the system
func (c *Client) CreateEntry(entry *Entry, contentType *ContentType) (created *Entry, err error) {
	if entry == nil {
		err = fmt.Errorf("CreateEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries", entry.SpaceID)
	_, err = c.sling.New().
		Post(path).
		Set("X-Contentful-Content-Type", contentType.ID).
		BodyJSON(entry).
		Receive(created, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	created.SpaceID = entry.SpaceID

	return
}

// UpdateEntry will update the specified entry with any changes that you have
// made.
func (c *Client) UpdateEntry(entry *Entry) (updated *Entry, err error) {
	if entry == nil {
		err = fmt.Errorf("CreateEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v", entry.SpaceID, entry.System.ID)
	_, err = c.sling.New().
		Post(path).
		Set("X-Contentful-Version", fmt.Sprintf("%v", entry.System.Version)).
		BodyJSON(entry).
		Receive(updated, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	updated.SpaceID = entry.SpaceID

	return
}

// DeleteEntry will delete the specified entry
func (c *Client) DeleteEntry(entry *Entry) (err error) {
	if entry == nil {
		err = fmt.Errorf("DeleteEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v", entry.SpaceID, entry.System.ID)
	_, err = c.sling.New().
		Delete(path).
		Set("X-Contentful-Version", fmt.Sprintf("%v", entry.System.Version)).
		Receive(nil, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	return
}

// PublishEntry makes the entry available via the Content Delivery API
func (c *Client) PublishEntry(entry *Entry) (published *Entry, err error) {
	if entry == nil {
		err = fmt.Errorf("PublishEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v/published", entry.SpaceID, entry.System.ID)
	_, err = c.sling.New().
		Put(path).
		Set("X-Contentful-Version", entry.System.Version).
		Receive(published, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	published.SpaceID = entry.SpaceID

	return
}

// UnpublishEntry makes the entry unavailable via the Content Delivery API
func (c *Client) UnpublishEntry(entry *Entry) (unpublished *Entry, err error) {
	if entry == nil {
		err = fmt.Errorf("UnpublishEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v/published", entry.SpaceID, entry.System.ID)
	_, err = c.sling.New().
		Delete(path).
		Receive(unpublished, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	unpublished.SpaceID = entry.SpaceID

	return
}

// ArchiveEntry will archive the specified entry. An entry can only be archived
// when it's not published.
func (c *Client) ArchiveEntry(entry *Entry) (archived *Entry, err error) {
	if entry == nil {
		err = fmt.Errorf("PublishEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v/archived", entry.SpaceID, entry.System.ID)
	_, err = c.sling.New().
		Put(path).
		Receive(archived, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	archived.SpaceID = entry.SpaceID

	return
}

// UnarchiveEntry unarchives the specified entry.
func (c *Client) UnarchiveEntry(entry *Entry) (unarchived *Entry, err error) {
	if entry == nil {
		err = fmt.Errorf("UnpublishEntry failed. Entry must not be nil!")
	}

	if err = entry.Validate(); err != nil {
		return
	}

	c.rl.Wait()

	contentfulError := new(ContentfulError)
	path := fmt.Sprintf("spaces/%v/entries/%v/archived", entry.SpaceID, entry.System.ID)
	_, err = c.sling.New().
		Delete(path).
		Receive(unarchived, contentfulError)

	if contentfulError.Message != "" {
		err = contentfulError
		return
	}

	unarchived.SpaceID = entry.SpaceID

	return
}
